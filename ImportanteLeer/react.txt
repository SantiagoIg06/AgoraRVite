se puede aÃ±adir const, let, arrays pero los objetos no se imprimen y las promesas tampoco

jsx tiene eventos y todo empiezan con "on"

el useState es para indicar al elemento que se actualice

--------------------------------------------------------------
ESTADO
import { useState } from 'react';

function App() => {
    const [num,setNum] = useState(1);

    const sumar = () => {
        setNum(num+=1);
    }

    <button onClick={sumar}>+1</button>
    <p>{num}</p>
}

--------------------------------------------------------------
FORMULARIOS CONTROLADOS
import { useState } from 'react';

function App () {

    const [valorInput,setValorInput] = useState('');

    const onChange = (evento) => {
        const valor = evento.target.value
        /* clg=console.log(); */
        setValorInput(valor);
    }

    return {
        <>
            <input value={valorInput} onChange={evento=>onChange(evento)}/>
            <p>{valorInput}</p>
        <>
    } 
}

--------------------------------------------------------------
USESTATE
ES ASYNCRONO

import { useState } from 'react'

export const Counter = () => {
    const [counter, setCounter] = useState(0)
    const onClick = () => {
        setCounter( counter+2 )
                    O 
        setCounter( (estado)=>estado+1 )
        setCounter( (estado)=>estado+1 )

    }
    return {
        <div>
            <p>{counter}</p>
            <button onClick={onClick}>+2</button>
        </div>
    }
}

--------------------------------------------------------------
PETICIONES A APIS Y SEPARAR COMPONENETES

import { useState } from 'react';

function App () {

    const [valorInput,setValorInput] = useState('');
    const [gifs, setGifs] = useState([]);

    const onChange = (evento) => {
        const valor = evento.target.value
        /* clg=console.log(); */
        setValorInput(valor);
    }

    const getGifs = async (query) => {
        const url = `https://api.giphy.com/v1/gifs/search?api_key=26OfJRKYfU2PidlsrT4ZzHAC1v3Lchuz&q=${query}`;
        const response = await fetch(url);
        const data = await response.json();
        return data.data;
    }

    const onSubmit = async (evento) => {
        evento.preventDefault();
        const gifs = await getGifs(valorInput)
        setGifs(gifs)
    }

    return (
        <>
            <Buscador 
                valorInput={valorInput}
                onChange={onChange}
                onSubmit={onSubmit}
            />

            {
                gifs.map(gif=> {
                    <img key={gif.id} src={gif.images.original.url} alt={gif.tittle}/>
                })
            }
            
        <>
    )
}
BUSCADOR.jsx

export const Buscador = ({ onSubmit, valorInput, onChange }) => {
    return {
        <form onSubmit={onSubmit}>
            <input value={valorInput} onChange={onChange}/>
        </form>
    }
}