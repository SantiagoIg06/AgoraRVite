REACT
import React, { useEffect, useState } from 'react';

AXIOS
npm install axios
import axios from 'axios';

Propósito: Hacer solicitudes HTTP desde el navegador.
Uso: Simplifica las solicitudes GET, POST y otras, con soporte para promesas y manejo de respuestas y errores.

/* EJEMPLO */

import axios from 'axios';

useEffect(() => {
  axios.get('https://api.example.com/data')
    .then(response => setData(response.data))
    .catch(error => console.error('Error fetching data:', error));
}, []);


BOOTSTRAP
npm install react-bootstrap bootstrap
import 'bootstrap/dist/css/bootstrap.min.css';

/* EJEMEPLO */
Ejemplo en src/components/ExampleComponent.jsx
import React from 'react';
import { Button, Card } from 'react-bootstrap';

function ExampleComponent() {
  return (
    <Card style={{ width: '18rem' }}>
      <Card.Body>
        <Card.Title>Card Title</Card.Title>
        <Card.Text>
          Some quick example text to build on the card title and make up the bulk of the card's content.
        </Card.Text>
        <Button variant="primary">Go somewhere</Button>
      </Card.Body>
    </Card>
  );
}

export default ExampleComponent;

Y EN APP.JSX
import React from 'react';
import ExampleComponent from './components/ExampleComponent';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>My React App with Bootstrap</h1>
        <ExampleComponent />
      </header>
    </div>
  );
}

export default App;

Asegúrate de importar Bootstrap CSS en tu archivo de entrada principal, src/main.jsx

// src/main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import 'bootstrap/dist/css/bootstrap.min.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



REACT ROUTER
npm install react-router-dom
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

Propósito: Manejo de rutas y navegación dentro de la aplicación.
Uso: Permite definir múltiples rutas y navegar entre diferentes componentes y vistas sin recargar la página.

/* EJEMPLO */

import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/home" component={Home} />
        <Route path="/about" component={About} />
      </Switch>
    </Router>
  );
}


REACT QUERY
npm install @tanstack/react-query
import { useQuery } from '@tanstack/react-query';

Propósito: Manejo eficiente del estado de datos obtenidos de APIs.
Uso: Simplifica la gestión de datos asincrónicos, como el fetching, caching, sincronización y actualización.

/* EJEMPLO */

import { useQuery } from '@tanstack/react-query';

function App() {
  const { data, error, isLoading } = useQuery('fetchData', () => fetch('/api/data').then(res => res.json()));

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error!</div>;

  return <div>Data: {JSON.stringify(data)}</div>;
}


REDUX TOOLKIT
npm install @reduxjs/toolkit react-redux
import { configureStore } from '@reduxjs/toolkit';

Propósito: Manejo del estado global de la aplicación de manera estructurada y eficiente.
Uso: Facilita la configuración de Redux, proporcionando herramientas para simplificar el código y mejorar la experiencia de desarrollo.

/* EJEMPLO */
import { configureStore, createSlice } from '@reduxjs/toolkit';
import { Provider, useDispatch, useSelector } from 'react-redux';

const counterSlice = createSlice({
  name: 'counter',
  initialState: { value: 0 },
  reducers: {
    increment: state => { state.value += 1 },
    decrement: state => { state.value -= 1 }
  }
});

const store = configureStore({ reducer: { counter: counterSlice.reducer } });

function Counter() {
  const dispatch = useDispatch();
  const count = useSelector(state => state.counter.value);

  return (
    <div>
      <button onClick={() => dispatch(counterSlice.actions.decrement())}>-</button>
      <span>{count}</span>
      <button onClick={() => dispatch(counterSlice.actions.increment())}>+</button>
    </div>
  );
}

function App() {
  return (
    <Provider store={store}>
      <Counter />
    </Provider>
  );
}


STYLED COMPONENTS
npm install styled-components
import styled from 'styled-components';

Propósito: Escribir CSS en JavaScript para estilizar componentes de React.
Uso: Permite crear componentes estilizados con sintaxis CSS, manteniendo los estilos encapsulados y asociados a sus componentes.

/* EJEMPLO */

import styled from 'styled-components';

const Button = styled.button`
  background: palevioletred;
  color: white;
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;
`;

function App() {
  return <Button>Styled Button</Button>;
}


TAILWIND CSS
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

Configuración básica en tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

Añadir en src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

Propósito: Framework de CSS utilitario para crear rápidamente diseños responsivos y modernos.

Uso: Proporciona clases de utilidad predefinidas para aplicar estilos directamente en los elementos HTML.

/* EJEMPLO */
function App() {
  return <button className="bg-blue-500 text-white p-2 rounded">Tailwind Button</button>;
}


MATERIAL UI
npm install @mui/material @emotion/react @emotion/styled
import Button from '@mui/material/Button';

Propósito: Conjunto de componentes UI preconstruidos y altamente personalizables.
Uso: Proporciona componentes listos para usar siguiendo las directrices de Material Design.

/* EJEMPLO */

import Button from '@mui/material/Button';

function App() {
  return <Button variant="contained" color="primary">MUI Button</Button>;
}


ANT DESIGN
npm install antd
import { Button } from 'antd';

Propósito: Conjunto de componentes UI sofisticados y con buen diseño.
Uso: Facilita la construcción de interfaces de usuario elegantes y profesionales.

/* EJEMPLO */

import { Button } from 'antd';

function App() {
  return <Button type="primary">AntD Button</Button>;
}


FORMIK
npm install formik
import { Formik, Form, Field } from 'formik';

Propósito: Manejar formularios y su estado de manera eficiente.
Uso: Simplifica la creación y gestión de formularios, incluyendo la validación y el manejo de estados de entrada.

/* EJEMPLO */

import { Formik, Form, Field } from 'formik';

function App() {
  return (
    <Formik
      initialValues={{ email: '' }}
      onSubmit={values => console.log(values)}
    >
      <Form>
        <Field name="email" type="email" />
        <button type="submit">Submit</button>
      </Form>
    </Formik>
  );
}


YUP
npm install yup
import * as Yup from 'yup';

Propósito: Validación de esquemas para formularios.
Uso: Define esquemas de validación y verifica que los datos cumplan con esos esquemas.

/* EJEMPLO */

import * as Yup from 'yup';

const validationSchema = Yup.object().shape({
  email: Yup.string().email('Invalid email').required('Required'),
});

function App() {
  return (
    <Formik
      initialValues={{ email: '' }}
      validationSchema={validationSchema}
      onSubmit={values => console.log(values)}
    >
      <Form>
        <Field name="email" type="email" />
        <button type="submit">Submit</button>
      </Form>
    </Formik>
  );
}

FAMER MOTION
npm install framer-motion

import {motion} from 'framer-motion'

motion.(puede ser img y les da los estilos de la documentacion que queiras)

